#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>

int main() {
    int shmid;
    int *shared_value;

    // Create shared memory segment
    shmid = shmget(IPC_PRIVATE, sizeof(int), 0666 | IPC_CREAT);

    if (shmid == -1) {
        perror("shmget");
        exit(1);
    }

    // Attach the shared memory segment to the process
    shared_value = (int *)shmat(shmid, NULL, 0);

    if (shared_value == (int *)(-1)) {
        perror("shmat");
        exit(1);
    }

    // Create child processes
    pid_t child1 = fork();

    if (child1 < 0) {
        perror("fork");
        exit(1);
    } else if (child1 == 0) {
        // Child process 1
        while (1) {
            (*shared_value)++;
            printf("Child 1 incremented shared_value to %d\n", *shared_value);
            sleep(1);
        }
    } else {
        pid_t child2 = fork();

        if (child2 < 0) {
            perror("fork");
            exit(1);
        } else if (child2 == 0) {
            // Child process 2
            while (1) {
                (*shared_value)--;
                printf("Child 2 decremented shared_value to %d\n", *shared_value);
                sleep(1);
            }
        } else {
            // Parent process
            while (1) {
                sleep(1); // Parent can just wait
            }
        }
    }

    // Detach and remove shared memory
    shmdt(shared_value);
    shmctl(shmid, IPC_RMID, NULL);

    return 0;
}
